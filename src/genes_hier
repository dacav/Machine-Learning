#!/usr/bin/env python

from __future__ import print_function, division
import sys
import itertools as it
from operator import itemgetter

import parser
import dataset
import thresholds
import hclust
import vecspace

try: range = xrange
except: pass

def build_vectors (problem, highest_to_keep):
    thrs = sorted( thresholds.run(problem),
                   key=lambda (i,(th,ig)) : ig )
    problem.set_thresholds(
        it.imap(lambda (i,(th,ig)) : (i, th), thrs)
    )

    # indexes of the genes getting highest information gain from the
    # splitting by thresholds.
    best_ig = it.islice(it.imap(itemgetter(0), thrs), highest_to_keep)

    # Vectors having as many dimensions as the number of available
    # examples. A vector for each gene.
    examples = problem.get_examples()
    bits = lambda i : it.imap(lambda x : int(x[0]),
                              examples.list_by(i))

    def make_vector (i):
        V = vecspace.Vector(it.imap(lambda x : int(x[0]),
                                    examples.list_by(i)))
        V.name = problem.feat_name(i)
        return V

    return it.imap(make_vector, best_ig)

def main (argv=None):
    if not argv: argv = sys.argv

    if len(argv) < 4:
        print("Usage: {0} <dataset> <output file> <N>".format(argv[0]),
              file=sys.stderr)
        return 1;

    try:
        f = open(argv[1], "rt")
        problem = parser.run(f, dataset.ProblemStructure)

        out = open(argv[2], "wt")
        for V in build_vectors(problem, int(argv[3])):
            print(V.name, "\t", V, file=out)
    except KeyboardInterrupt:
        print("Interrupted. BYE!", file=sys.stderr)
        return 1
    except Exception as e:
        print("Error:", e)
    finally:
        f.close()
        out.close()

    return 0

if __name__ == "__main__":
    sys.exit(main())

