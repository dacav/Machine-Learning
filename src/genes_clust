#!/usr/bin/env python

from __future__ import print_function, division
import sys
import itertools as it
import re
from collections import defaultdict as defdict
from optparse import OptionParser
from operator import itemgetter
import parser
import dataset

from vecspace import Vector
import hclust

try: range = xrange
except: pass

DEFAULT_TAKEBEST = 100

class ClustHistory :

    def __init__ (self, out):
        self.out = out
        self.seen = defdict(it.count().next)
        self.linked = set()
        print("digraph Clust {", file=self.out)

    def describe_nodes (self, *cs):
        for c in cs:
            if id(c) in self.seen.iterkeys():
                continue
            cid = self.node_id(c)
            if len(c) == 1:
                name = next(iter(c)).name
                shape = 'box'
            else:
                name = ''
                shape = 'point'
            fmt = "\t{0} [label=\"{1}\", shape={2}]"
            print(fmt.format(cid, name, shape), file=self.out)

    def node_id (self, c):
        return self.seen[id(c)]

    def __call__ (self, c0, c1, to):
        self.describe_nodes(c0, c1, to)
        print("\t{0} -> {1}; {0} -> {2}".format(self.node_id(to),
                                                self.node_id(c0),
                                                self.node_id(c1)),
              file=self.out
        )

    def end (self):
        print("}", file=self.out)

ALGS = {
    "nearest-neighbor"   : hclust.ClustComparers.nearest_neighbor,
    "farthest-neighbor"  : hclust.ClustComparers.farthest_neighbor,
    "average-distance"   : hclust.ClustComparers.average_distance,
    "dist-average"       : hclust.ClustComparers.dist_average
}

def parse_options (argv):
    parser = OptionParser(
        usage="%prog [options]\n\n" + \
              "Available algorithms\n\t" + \
              "\n\t".join(ALGS.iterkeys()) + "\n\tall-of-them"
    )

    parser.add_option("--algorithm", dest="algs", default=list(),
                      action="append", type="string",
                      help="Enable distance algorithm")
    parser.add_option("--log-file", dest="log_file",
                      default="",
                      type="string", help="Target file for statistics")
    parser.add_option("-D", "--dataset", dest="dataset", default="",
                      type="string", help="Dataset file")
    parser.add_option("-R", "--genes-rank", dest="genes_rank", default="",
                      type="string", help="Dataset file")
    parser.add_option("-n", type="int", help="Number of genes to take",
                      dest="takebest", default=DEFAULT_TAKEBEST)

    opts, args = parser.parse_args(argv)
    if not (opts.dataset and opts.genes_rank):
        print("You must supply a genes-rank file and a dataset",
              file=sys.stderr)
        parser.print_help()
        return None

    if not opts.algs:
        print("You must give me at least one algorithm")
        parser.print_help()
        return None
    elif "all-of-them" in opts.algs:
        opts.algs = list(ALGS.iterkeys())
    else:
        invalid = filter(lambda x : x not in ALGS, opts.algs)
        if invalid:
            print("Invalid algorithms:", ",".join(invalid))
            parser.print_help()
            return None
    return opts

def main (argv=None):
    if not argv: argv = sys.argv
    opts = parse_options(argv)
    if opts == None:
        return 1

    pattern = re.compile(r"Gene (\d+) : (-?\d+\.?\d*) (-?\d+\.?\d*)")
    def parse_gene_info (row):
        try:
            m = pattern.match(row)
            return int(m.group(1)), float(m.group(2))
        except Exception as e:
            print("Warning: skipping line \"{0}\"".format(row),
                  "(cause: {0})".format(repr(e)), file=sys.stderr)
            return None

    def binary_vectors (thrs, problem):
        # Vectors having as many dimensions as the number of available
        # examples. A vector for each gene.
        examples = problem.get_examples()
        bits = lambda i : it.imap(lambda x : int(x[0]),
                                  examples.list_by(i))

        def make_vector (i):
            V = Vector(it.imap(lambda x : int(x[0]), examples.list_by(i)))
            V.name = problem.feat_name(i)
            return V

        return it.imap(make_vector, it.imap(itemgetter(0), thrs))

    rnk = inpt = log = None
    try:
        ds = open(opts.dataset, "rt")
        rnk = open(opts.genes_rank, "rt")
        log = open(opts.log_file, "wt") if opts.log_file else sys.stderr
        problem = parser.run(ds, dataset.ProblemStructure)

        # Setting thresholds to read problem
        thrs = list( it.ifilter(None, it.imap(parse_gene_info, rnk)) )
        problem.set_thresholds(thrs)

        genes = list( binary_vectors(it.islice(thrs, opts.takebest),
                                               problem) )

        for alg in opts.algs:
            out_dot = open(alg + ".dot", "wt")
            ch = ClustHistory(out_dot)
            clm = hclust.ClusterManager(genes, clust_cmp=ALGS[alg],
                                        history=ch)

            print("Starting clustering with algorithm", alg, file=log)

            for step in it.count(1):
                sqderr = clm.sum_of_squared_errors()
                print("    Iteration: {0:03d}".format(step),
                      "Clusters: {0:03d}".format(clm.nclusts()),
                      "Sum of quared errors: {0:03.5f}".format(sqderr),
                      file=log)
                if clm.step(): break
            ch.end()
            out_dot.close()

            print("Terminated clustering with algorithm", alg, file=log,
                  end="\n\n")

    except KeyError as e:
        print("Cannot use algorithm", e, file=sys.stderr)
        print_algs()
        return 1
    except KeyboardInterrupt:
        print("Interrupted. BYE!", file=sys.stderr)
        return 1
    except Exception as e:
        print(">> PHAIL: ", e)
    finally:
        if ds: ds.close()
        if rnk: rnk.close()
        if log: log.close()

    return 0

if __name__ == '__main__':
    sys.exit(main())

