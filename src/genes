#!/usr/bin/env python

from __future__ import print_function, division
import sys
import itertools as it
from operator import itemgetter
import const

import parser
import dataset
import thresholds
import hclust
import vecspace

try: range = xrange
except: pass

def main (argv=None):
    if not argv: argv = sys.argv

    if len(argv) < 2:
        print("Dataset file required", file=sys.stderr);
        return 1;

    try:
        f = open(argv[1], "rt");
        problem = parser.run(f, dataset.ProblemStructure)
        thrs = sorted( thresholds.run(problem),
                       key=lambda (i,(th,ig)) : ig )
        problem.set_thresholds(
            it.imap(lambda (i,(th,ig)) : (i, th), thrs)
        )

        # indexes of the genes getting highest information gain from the
        # splitting by thresholds.
        best_ig = it.islice(it.imap(itemgetter(0), thrs),
                            const.HIGHEST_TO_KEEP)

        # Vectors having as many dimensions as the number of available
        # examples. A vector for each gene.
        examples = problem.get_examples()
        bits = lambda i : it.imap(lambda x : int(x[0]),
                                  examples.list_by(i))
        vecs = it.imap(lambda i : vecspace.Vector(bits(i)), best_ig)
        hcl = hclust.ClusterManager(vecs)
        print("Clusters:", *hcl)
        hcl.step()
        print("Clusters:", *hcl)

    except KeyboardInterrupt:
        print("Interrupted. BYE!", file=sys.stderr)
        return 1
    finally:
        f.close()

    return 0

if __name__ == "__main__":
    sys.exit(main())

